// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlaZe_Server.Pages.Car
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Work\BlaZe\BlaZe\BlaZe_Server\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Work\BlaZe\BlaZe\BlaZe_Server\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Work\BlaZe\BlaZe\BlaZe_Server\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Work\BlaZe\BlaZe\BlaZe_Server\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Work\BlaZe\BlaZe\BlaZe_Server\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Work\BlaZe\BlaZe\BlaZe_Server\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Work\BlaZe\BlaZe\BlaZe_Server\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Work\BlaZe\BlaZe\BlaZe_Server\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Work\BlaZe\BlaZe\BlaZe_Server\_Imports.razor"
using BlaZe_Server;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Work\BlaZe\BlaZe\BlaZe_Server\_Imports.razor"
using BlaZe_Server.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\Work\BlaZe\BlaZe\BlaZe_Server\_Imports.razor"
using Model;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\Work\BlaZe\BlaZe\BlaZe_Server\_Imports.razor"
using BlaZe_Server.Helper;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\Work\BlaZe\BlaZe\BlaZe_Server\_Imports.razor"
using Blazored.TextEditor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Work\BlaZe\BlaZe\BlaZe_Server\Pages\Car\CarUpsert.razor"
using Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Work\BlaZe\BlaZe\BlaZe_Server\Pages\Car\CarUpsert.razor"
using Business.Repository.IRepository;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Work\BlaZe\BlaZe\BlaZe_Server\Pages\Car\CarUpsert.razor"
using Service.IService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\Work\BlaZe\BlaZe\BlaZe_Server\Pages\Car\CarUpsert.razor"
           [Authorize(Roles = "Admin")]

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/car/create")]
    [Microsoft.AspNetCore.Components.RouteAttribute("/car/edit/{Id:int}")]
    public partial class CarUpsert : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 120 "D:\Work\BlaZe\BlaZe\BlaZe_Server\Pages\Car\CarUpsert.razor"
       
    [Parameter]
    public int? Id { get; set; }
    private CarDTO CarModel { get; set; } = new CarDTO();
    private CarImageDTO CarImageModel { get; set; } = new CarImageDTO();
    private string Title { get; set; } = "Create";
    private List<string> DeletedImgs { get; set; } = new List<string>();
    private List<string> TempImgs { get; set; } = new List<string>();
    private bool UploadingImage { get; set; } = false;
    public BlazoredTextEditor QuillHtml { get; set; } = new BlazoredTextEditor();

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    private async Task HandleUpsert()
    {
        try
        {
            var carByName = await CarRepo.IsCarUnique(CarModel.Name, CarModel.Id);
            if (carByName != null)
            {
                await JsRuntime.ToasterFail("Car already exists!");
                return;
            }

            await GetQuillHTML(CarModel);

            if (CarModel.Id != 0)
            {
                //update
                var updatedCar = await CarRepo.UpdateCar(CarModel.Id, CarModel);
                if (CarModel.ImageUrls != null)
                {
                    foreach (var deletedImgName in DeletedImgs)
                    {
                        var imgName = deletedImgName.Replace($"{NavigationManager.BaseUri}CarImages/", "");
                        var deletedImg = FileUpload.DeleteFile(imgName);
                        await CarImagesRepo.DeleteCarImageByUrl(deletedImgName);
                    }

                    await AddCarImage(updatedCar);
                }
                await JsRuntime.ToasterSuccess("Car updated!");
            }
            else
            {
                //create
                var createdCar = await CarRepo.CreateCar(CarModel);
                await AddCarImage(createdCar);
                //todo: handle deletedImages here as well
                await JsRuntime.ToasterSuccess("Car created!");
            }
        }
        catch (Exception)
        {
            throw;
        }

        NavigationManager.NavigateTo("car");
    }

    private async Task HandleImgUpload(InputFileChangeEventArgs e)
    {
        UploadingImage = true;
        try
        {
            var images = new List<string>();
            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower() == ".jpg" || fileInfo.Extension.ToLower() == ".png" || fileInfo.Extension.ToLower() == ".jpeg")
                    {
                        var uploadedImgPath = await FileUpload.UploadFile(file);
                        images.Add(uploadedImgPath);
                    }
                }

                if (images.Any())
                {
                    CarModel.ImageUrls.AddRange(images);
                    TempImgs.AddRange(images);
                }
                else
                {
                    await JsRuntime.ToasterFail("Image upload failed.");
                    return;
                }
            }
        }
        catch (Exception ex)
        {
            await JsRuntime.ToasterFail(ex.Message);
        }
        UploadingImage = false;
    }

    private void HandleBack()
    {
        foreach (var tempImg in TempImgs)
        {
            var imgName = tempImg.Replace($"{NavigationManager.BaseUri}CarImages/", "");
            var deletedImg = FileUpload.DeleteFile(imgName);
        }
    }

    private async Task AddCarImage(CarDTO CarDTO)
    {
        foreach (var imgUrl in CarModel.ImageUrls)
        {
            if (CarModel.CarImages == null || CarModel.CarImages.Where(x => x.CarImgUrl == imgUrl).Count() == 0) //isn't it easier to just overwrite everything?
            {
                CarImageModel = new CarImageDTO()
                {
                    CarId = CarDTO.Id,
                    CarImgUrl = imgUrl
                };
                await CarImagesRepo.CreateCarImage(CarImageModel);
            }
        }
    }

    private async Task DeleteImage(string imgUrl)
    {
        try
        {
            var imgIdx = CarModel.ImageUrls.FindIndex(x => x == imgUrl);
            var imgName = imgUrl.Replace($"{NavigationManager.BaseUri}CarImages/", "");
            if (CarModel.Id == 0) // we're creating
            {
                var deletedImg = FileUpload.DeleteFile(imgName);
            }
            else // we're updating
            {
                DeletedImgs.Add(imgUrl);
            }
            CarModel.ImageUrls.RemoveAt(imgIdx);
        }
        catch (Exception ex)
        {
            await JsRuntime.ToasterFail(ex.Message);
        }
    }

    public async Task SetQuillHTML() //ewww
    {
        bool loading = true;
        while (loading)
        {
            try
            {
                if (!string.IsNullOrEmpty(CarModel.Details))
                {
                    await this.QuillHtml.LoadHTMLContent(CarModel.Details);
                }
                loading = false;
            }
            catch (Exception)
            {
                await Task.Delay(10);
                loading = true;
            }
        }
        StateHasChanged();
    }

    public async Task GetQuillHTML(CarDTO car)
    {
        car.Details = await this.QuillHtml.GetHTML();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationState;
        if(!authState.User.Identity.IsAuthenticated)
        {
            var uri = new Uri(NavigationManager.Uri);

            NavigationManager.NavigateTo($"/identity/account/login?returnUrl={uri.LocalPath}");
        }
        if (Id != null)
        {
            //update
            Title = "Update";
            CarModel = await CarRepo.GetCar(Id.Value);
            if (CarModel?.CarImages != null)
            {
                CarModel.ImageUrls = CarModel.CarImages.Select(u => u.CarImgUrl).ToList();
            }
        }
        else
        {
            //create
            CarModel = new CarDTO();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        await SetQuillHTML();
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IFileUpload FileUpload { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JsRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ICarImagesRepo CarImagesRepo { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ICarRepo CarRepo { get; set; }
    }
}
#pragma warning restore 1591
