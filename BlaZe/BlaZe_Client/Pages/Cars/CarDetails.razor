@page "/car/car-details/{Id:int}"

@inject IJSRuntime JsRuntime;
@inject ILocalStorageService localStorage;
@inject ICarService carService;
@inject IStripeService stripe; 
@inject IOrderService orderService;

@attribute [Authorize(Roles = "Customer")]
    @if (OrderVM?.OrderDTO?.CarDTO?.CarImages == null)
    {
    <div class="spinner"></div>
    }
    else
    {
    <div class="mt-4 mx-4 px-0 px-md-5 mx-md-5">

        <div class="row p-2 my-3 " style="border-radius:20px; ">
            <div class="col-12 col-lg-7 p-4" style="border: 1px solid #fff">
                <div class="row px-2 text-success border-bottom">
                    <div class="col-8 py-1"><p style="font-size:200%;">Selected car</p></div>
                    <div class="col-4 p-0"><a href="cars" class="btn btn-secondary btn-block">Back</a></div>
                </div>

                <div class="row">
                    <div class="col-6">
                        <div id="" class="carousel slide mb-4 m-md-3 m-0 pt-3 pt-md-0" data-ride="carousel">
                            <div id="carouselExampleIndicators" class="carousel slide" data-ride="carousel">
                                <ol class="carousel-indicators">
                                    @{
                                            int imgIdx = 0;
                                            int innerImgIdx = 0;
                                    }
                                    @foreach (var img in OrderVM.OrderDTO.CarDTO.CarImages)
                                        {
                                            if (imgIdx == 0)
                                            {
                                    <li data-target="#carouselExampleIndicators" data-slide-to="@imgIdx" class="active"></li>

                                            }
                                            else
                                            {
                                    <li data-target="#carouselExampleIndicators" data-slide-to="@imgIdx"></li>
                                            }
                                            imgIdx++;
                                        }
                                </ol>
                                <div class="carousel-inner">
                                    @foreach (var img in OrderVM.OrderDTO.CarDTO.CarImages)
                                        {
                                            if (innerImgIdx == 0)
                                            {
                                    <div class="carousel-item active">
                                        <img class="d-block w-100" style="border-radius:20px;" src="@img.CarImgUrl" alt="First slide">
                                    </div>
                                            }
                                            else
                                            {
                                    <div class="carousel-item">
                                        <img class="d-block w-100" style="border-radius:20px;" src="@img.CarImgUrl" alt="First slide">
                                    </div>
                                            }

                                            innerImgIdx++;
                                        }
                                </div>
                                <a class="carousel-control-prev" href="#carouselExampleIndicators" role="button" data-slide="prev">
                                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                    <span class="sr-only">Previous</span>
                                </a>
                                <a class="carousel-control-next" href="#carouselExampleIndicators" role="button" data-slide="next">
                                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                    <span class="sr-only">Next</span>
                                </a>
                            </div>
                        </div>
                    </div>
                    <div class="col-6">
                        <span class="float-right pt-4">
                            <span class="float-right car-prop-full">Seats: <span class="car-prop">@OrderVM.OrderDTO.CarDTO.Seats</span> </span><br />
                            <span class="float-right pt-1 car-prop-full">Transmission: <span class="car-prop">@(OrderVM.OrderDTO.CarDTO.IsManual ? "Manual" : "Automatic")</span></span><br />
                            <h4 class="text-warning font-weight-bold pt-5">
                                <span style="border-bottom:1px solid #ff6a00; float: right;" class="car-prop-full">
                                    @OrderVM.OrderDTO.CarDTO.TotalPrice.ToString() $
                                </span>
                            </h4>
                            <span class="float-right car-prop-full">Cost for <span class="car-prop">@OrderVM.OrderDTO.CarDTO.TotalDays days.</span></span>
                        </span>
                    </div>
                </div>
                <div class="row p-2">
                    <div class="col-12">
                        <h3 class="card-title text-warning">@OrderVM.OrderDTO.CarDTO.Name</h3>
                        <p class="card-text" style="font-size:large">
                            @((MarkupString)@OrderVM.OrderDTO.CarDTO.Details)
                        </p>
                    </div>

                </div>
            </div>

            <div class="col-12 col-lg-5 p-4 2 mt-4 mt-md-0" style="border: 1px solid #fff;">
                <EditForm Model="OrderVM" class="container" OnValidSubmit="HandleOrder">

                    <div class="row px-2 text-success border-bottom"><div class="col-7 py-1"><p style="margin:0px; font-size:200%;">Order details</p></div></div>

                    <div class="form-group pt-2">
                        <label class="text-warning input-label">Name</label>
                        <InputText @bind-Value="OrderVM.OrderDTO.Name" type="text" class="form-control" />
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning input-label">Phone</label>
                        <InputText @bind-Value="OrderVM.OrderDTO.Phone" type="text" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label class="text-warning input-label">Email</label>
                        <InputText @bind-Value="OrderVM.OrderDTO.Email" type="text" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label class="text-warning input-label">Rent date</label>
                        <InputDate @bind-Value="OrderVM.OrderDTO.StartDate" type="date" disabled class="form-control" />
                    </div>
                    <div class="form-group">
                        <label class="text-warning input-label">Return date</label>
                        <InputDate @bind-Value="OrderVM.OrderDTO.EndDate" type="date" disabled class="form-control" />
                    </div>
                    <div class="form-group">
                        <label class="text-warning input-label">Days</label>
                        <input type="number" min="0" value="@noOfDays" @onchange="HandleDaysChange" class="form-control">
                    </div>
                    <div class="form-group">

                        @if (OrderVM.OrderDTO.CarDTO.IsRented)
                            {
                        <input class="btn btn-secondary form-control" value="Sold Out" />
                            }
                            else
                            {
                        <button type="submit" class="btn btn-success form-control">Rent</button>
                            }
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
    }

@code {
    [Parameter]
    public int? Id { get; set; }

    public OrderVM OrderVM { get; set; } = new OrderVM();
    private int noOfDays;

    protected async override Task OnInitializedAsync()
    {
        try
        {
            OrderVM.OrderDTO = new OrderDTO();
            if(Id != null)
            {
                var carInitInfo = await localStorage.GetItemAsync<HomeVM>(Static.initDates);
                if (carInitInfo != null)
                {
                    OrderVM.OrderDTO.CarDTO = await carService.GetCar(
                        Id.Value, carInitInfo.StartDate.ToString("MM/dd/yyyy"), carInitInfo.EndDate.ToString("MM/dd/yyyy")
                        );
                    noOfDays = carInitInfo.noOfDays;
                    OrderVM.OrderDTO.StartDate = carInitInfo.StartDate;
                    OrderVM.OrderDTO.EndDate = carInitInfo.EndDate;
                    OrderVM.OrderDTO.CarDTO.TotalDays = carInitInfo.noOfDays;
                    OrderVM.OrderDTO.CarDTO.TotalPrice = carInitInfo.noOfDays * OrderVM.OrderDTO.CarDTO.Price;
                }
                else
                {
                    OrderVM.OrderDTO.CarDTO = await carService.GetCar(
                        Id.Value, DateTime.Now.ToString("MM/dd/yyyy"), DateTime.Now.AddDays(1).ToString("MM/dd/yyyy")
                        );
                    noOfDays = 1;
                    OrderVM.OrderDTO.StartDate = DateTime.Now;
                    OrderVM.OrderDTO.EndDate = DateTime.Now.AddDays(1);
                    OrderVM.OrderDTO.CarDTO.TotalDays = 1;
                    OrderVM.OrderDTO.CarDTO.TotalDays = 1 * OrderVM.OrderDTO.CarDTO.Price;
                }

                var user = await localStorage.GetItemAsync<UserDTO>(Static.User);

                if (user != null)
                {
                    OrderVM.OrderDTO.UserId = user.Id;
                    OrderVM.OrderDTO.Name = user.Name;
                    OrderVM.OrderDTO.Email = user.Email;
                    OrderVM.OrderDTO.Phone = user.PhoneNo;
                }
            }
        }
        catch (Exception e)
        {
            await JsRuntime.ToasterFail(e.Message);
        }
    }

    private async Task HandleDaysChange(ChangeEventArgs e)
    {
        noOfDays = Convert.ToInt32(e.Value.ToString());
        OrderVM.OrderDTO.CarDTO = await carService.GetCar(
            Id.Value, OrderVM.OrderDTO.StartDate.ToString("MM/dd/yyy"), OrderVM.OrderDTO.StartDate.AddDays(noOfDays).ToString("MM/dd/yyy"));

        OrderVM.OrderDTO.EndDate = OrderVM.OrderDTO.StartDate.AddDays(noOfDays);
        OrderVM.OrderDTO.CarDTO.TotalDays = noOfDays;
        OrderVM.OrderDTO.CarDTO.TotalPrice = noOfDays * OrderVM.OrderDTO.CarDTO.Price;
    }

    private async Task HandleOrder()
    {
        if (!await HandleValidation())
        {
            return;
        }

        try
        {
            var paymentDTO = new StripeDTO()
            {
                Price = Convert.ToInt32(OrderVM.OrderDTO.CarDTO.TotalPrice * 100),
                ProductName = OrderVM.OrderDTO.CarDTO.Name,
                ReturnUrl = "/car/" + Id
            };

            var result = await stripe.CheckOut(paymentDTO);

            OrderVM.OrderDTO.StripeSessionId = result;
            OrderVM.OrderDTO.CarId = OrderVM.OrderDTO.CarDTO.Id;
            OrderVM.OrderDTO.TotalPrice = OrderVM.OrderDTO.CarDTO.TotalPrice;

            var orderSaved = await orderService.SaveOrder(OrderVM.OrderDTO);
            await localStorage.SetItemAsync(Static.Order, orderSaved);

            await JsRuntime.InvokeVoidAsync("redirectToCheckOut", result);
        }
        catch (Exception e)
        {
            await JsRuntime.ToasterFail(e.Message);
        }
    }

    private async Task<bool> HandleValidation()
    {
        if(string.IsNullOrEmpty(OrderVM.OrderDTO.Name))
        {
            await JsRuntime.ToasterFail("Empty name.");
            return false;
        }
        if (string.IsNullOrEmpty(OrderVM.OrderDTO.Phone))
        {
            await JsRuntime.ToasterFail("Empty phone.");
            return false;
        }
        if (string.IsNullOrEmpty(OrderVM.OrderDTO.Email))
        {
            await JsRuntime.ToasterFail("Empty email.");
            return false;
        }
        return true;
    }
}
