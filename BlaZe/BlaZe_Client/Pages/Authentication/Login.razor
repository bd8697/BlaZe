@page "/login"
@inject IAuthenticationService authService
@inject NavigationManager navigationManager
@using System.Web;



<EditForm Model="User" OnValidSubmit="LoginMe">
    <DataAnnotationsValidator />

    <div class="py-4">
        <div class=" row form-group ">
            <div class="col-6 offset-3 ">
                <div class="card border">
                    <div class="card-body px-lg-5 pt-4">
                        <h3 class="col-12 text-success text-center py-2">
                            <strong>Sign In</strong>
                        </h3>

                        @if (ShowErrors)
                        {
                            <p class="text-center text-danger">@Errors</p>
                        }
                        <hr class="mySep" />

                        <InputText @bind-Value="User.UserName" id="username" placeholder="Username..." class="form-control mb-2" />
                        <ValidationMessage For="(()=>User.UserName)"></ValidationMessage>
                        <InputText @bind-Value="User.Password" type="password" placeholder="Password..." id="password" class="form-control mb-2" />
                        <ValidationMessage For="(()=>User.Password)"></ValidationMessage>

                        <hr class="mySep" />

                        @if (IsProcessing)
                        {
                            <button type="submit" class="btn btn-success btn-block disabled"><i class="fas fa-sign-in-alt"></i> ...</button>
                        }
                        else
                        {
                            <button type="submit" class="btn btn-success btn-block"><i class="fas fa-sign-in-alt"></i> Sign in</button>
                        }
                        <a href="/register"
                           class="btn btn-primary text-white mt-3"><i class="fas fa-user-plus"></i> Register</a>

                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>


                        @code {
                            private AuthDTO User = new AuthDTO();
                            public bool IsProcessing { get; set; } = false;
                            public bool ShowErrors { get; set; }
                            public string Errors { get; set; }
                            public string ReturnUrl { get; set; }

                            private async Task LoginMe()
                            {
                                ShowErrors = false;
                                IsProcessing = true;
                                var result = await authService.Login(User);
                                if (result.isAuthSucc)
                                {
                                    IsProcessing = false;

                                    var absoluteUri = new Uri(navigationManager.Uri);
                                    var queryParam = HttpUtility.ParseQueryString(absoluteUri.Query);
                                    ReturnUrl = queryParam["returnUrl"];
                                    if (string.IsNullOrEmpty(ReturnUrl))
                                    {
                                        navigationManager.NavigateTo("/");
                                    }
                                    else
                                    {
                                        navigationManager.NavigateTo("/" + ReturnUrl);
                                    }
                                }
                                else
                                {
                                    IsProcessing = false;
                                    Errors = result.Errors;
                                    ShowErrors = true;
                                }
                            }
                        }
